import React from 'react';
import { SVGHelper } from './SVGHelpers';
import { Point, Vector } from './helpers';
export interface WithDraggableProps {
    draggable: boolean;
    onDragStart?: (arg: Point & Vector) => void;
    onDrag?: (arg: Vector) => void;
    onDragEnd?: (arg: Point) => void;
}
export declare const withDraggable: <P extends object>(Component: React.ComponentType<P>) => {
    new (props: (P & WithDraggableProps) | Readonly<P & WithDraggableProps>): {
        ref: React.RefObject<SVGSVGElement>;
        svg: SVGHelper;
        dragLastPosition: null | Point;
        wasMoved: boolean;
        render(): JSX.Element;
        componentDidUpdate(prevProps: WithDraggableProps): void;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getMousePosition(ev: TouchEvent | MouseEvent): Point;
        onMouseTouchDown: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchMove: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchUp: (e: TouchEvent | MouseEvent) => void;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & WithDraggableProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<P & WithDraggableProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<P & WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<P & WithDraggableProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<P & WithDraggableProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P & WithDraggableProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<P & WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P & WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: P & WithDraggableProps, context: any): {
        ref: React.RefObject<SVGSVGElement>;
        svg: SVGHelper;
        dragLastPosition: null | Point;
        wasMoved: boolean;
        render(): JSX.Element;
        componentDidUpdate(prevProps: WithDraggableProps): void;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getMousePosition(ev: TouchEvent | MouseEvent): Point;
        onMouseTouchDown: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchMove: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchUp: (e: TouchEvent | MouseEvent) => void;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & WithDraggableProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<P & WithDraggableProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<P & WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<P & WithDraggableProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<P & WithDraggableProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P & WithDraggableProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<P & WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P & WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
