/// <reference types="react" />
export interface Point {
    x: number;
    y: number;
}
export interface Vector {
    dx: number;
    dy: number;
}
export interface Size {
    width: number;
    height: number;
}
export interface Dictionary<T> {
    [key: string]: T;
}
export declare type touchOrMouseEvent<T> = React.MouseEvent<T, MouseEvent> | React.TouchEvent<T>;
export declare type touchAndMouseEvent<T> = React.MouseEvent<T, MouseEvent> & React.TouchEvent<T>;
export declare const objectToClassName: (obj: Dictionary<boolean>) => string;
export declare const arePointsEqual: (p1: Point, p2: Point) => boolean;
export declare const arePointListEqual: (arr1: Point[], arr2: Point[]) => boolean;
export declare const roundPointCoordinates: ({ x, y }: Point, p?: number) => Point;
export declare const findPointByPosition: (points: Point[], position: Point, r?: number) => {
    point: Point;
    index: number;
};
export declare const getDistance: (p1: Point, p2: Point) => number;
export declare const getAngle: (p1: Point, p2: Point) => number;
export declare const approximateToAnAngleMultiplicity: (startPoint: Point, endPoint: Point, minAngle: number) => Point;
export declare const approximateToAngles: (startPoint: Point, endPoint: Point, angles: number[]) => Point;
export declare const calculateAnglesBeetwenPoints: (points: Point[]) => number[];
export declare function getClippedImageCanvas(src: string, path: Point[], callback: (err: Error | null, canvas: HTMLCanvasElement) => void, crop?: boolean): void;
