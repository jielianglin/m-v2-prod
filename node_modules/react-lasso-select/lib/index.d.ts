import React from 'react';
import PropTypes from 'prop-types';
import { SVGHelper } from './SVGHelpers';
import { getClippedImageCanvas, Point, Vector, touchOrMouseEvent, Size } from './helpers';
import { pathReducerAction, PathState } from './pathReducer';
export interface ReactLassoProps {
    src: string;
    value: Point[];
    style: React.CSSProperties;
    viewBox: Size;
    disabled: boolean;
    imageStyle: React.CSSProperties;
    onImageLoad: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;
    onImageError: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;
    onChange?: (path: Point[]) => void;
    onComplete?: (path: Point[]) => void;
    imageAlt?: string;
    crossOrigin?: 'anonymous' | 'use-credentials' | '';
}
export interface ReactLassoState {
    path: PathState;
    pointer: Point;
}
export declare class ReactLasso extends React.Component<ReactLassoProps, ReactLassoState> {
    state: ReactLassoState;
    imageRef: React.RefObject<HTMLImageElement>;
    svgRef: React.RefObject<SVGSVGElement>;
    svg: SVGHelper;
    angles: number[];
    path: PathState;
    lastEmittedPoints: Point[];
    lastUpdatedPoints: Point[];
    imgError: boolean;
    setPathFromPropsOnMediaLoad: boolean;
    constructor(props: ReactLassoProps);
    render(): JSX.Element;
    componentDidUpdate(prevProps: ReactLassoProps): void;
    convertPoints(points: Point[]): Point[];
    checkIfPathUpdated(wasClosedBefore: boolean): void;
    emitOnChange({ points }: PathState): void;
    emitOnComplete(convertedPoints: Point[]): void;
    setPointer({ x, y }: Point, force?: boolean): void;
    hidePointer: () => void;
    dispatchPathAction(action: pathReducerAction & {
        pointer?: Point;
    }): void;
    isLoaded(): boolean;
    getAspectRatio(): Point;
    setPathStateFromProps(): void;
    getRoundedPoints(): Point[];
    getBorder(): Point[];
    getPolygonPoints(): Point[];
    getPolylinePoints(): Point[];
    getMousePosition(e: touchOrMouseEvent<SVGSVGElement>, lookupForNearlyPoints?: boolean, lookupForApproximation?: boolean): [Point, {
        point: Point;
        index: number;
    }];
    onShapeDrag: ({ dx, dy }: Vector) => void;
    onPointDrag: (idx: number, { dx, dy }: Vector) => void;
    onPointClick: (idx: number) => void;
    onDragEnd: () => void;
    onMediaLoaded: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;
    onMediaError: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;
    onClickTouchEvent: (e: touchOrMouseEvent<SVGSVGElement>) => void;
    onClick: (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => void;
    onTouchEnd: (e: React.TouchEvent<SVGSVGElement>) => void;
    onMouseTouchMove: (e: touchOrMouseEvent<SVGSVGElement>) => void;
    onContextMenu: (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => void;
    static propTypes: {
        value: PropTypes.Requireable<(Required<PropTypes.InferProps<{
            x: PropTypes.Validator<number>;
            y: PropTypes.Validator<number>;
        }>> | null | undefined)[]>;
        style: PropTypes.Requireable<PropTypes.InferProps<{}>>;
        viewBox: PropTypes.Requireable<Required<PropTypes.InferProps<{
            width: PropTypes.Validator<number>;
            height: PropTypes.Validator<number>;
        }>>>;
        disabled: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onComplete: PropTypes.Requireable<(...args: any[]) => any>;
        src: PropTypes.Validator<string>;
        imageAlt: PropTypes.Requireable<string>;
        crossOrigin: PropTypes.Requireable<string>;
        imageStyle: PropTypes.Requireable<PropTypes.InferProps<{}>>;
        onImageLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onImageError: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        value: never[];
        style: {};
        imageStyle: {};
        viewBox: {
            width: number;
            height: number;
        };
        disabled: boolean;
        onImageError: Function;
        onImageLoad: Function;
    };
}
export { ReactLasso as default, ReactLasso as Component, getClippedImageCanvas as getCanvas };
