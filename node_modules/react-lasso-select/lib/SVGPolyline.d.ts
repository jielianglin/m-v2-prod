import React from 'react';
import { Point } from './helpers';
export interface SVGPolylineProps {
    path: Point[];
    animate: boolean;
    draggable: boolean;
}
export declare const SVGPolyline: {
    new (props: (SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps) | Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>): {
        ref: React.RefObject<SVGSVGElement>;
        svg: import("./SVGHelpers").SVGHelper;
        dragLastPosition: Point | null;
        wasMoved: boolean;
        render(): JSX.Element;
        componentDidUpdate(prevProps: import("./withDraggable").WithDraggableProps): void;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getMousePosition(ev: TouchEvent | MouseEvent): Point;
        onMouseTouchDown: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchMove: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchUp: (e: TouchEvent | MouseEvent) => void;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps, context: any): {
        ref: React.RefObject<SVGSVGElement>;
        svg: import("./SVGHelpers").SVGHelper;
        dragLastPosition: Point | null;
        wasMoved: boolean;
        render(): JSX.Element;
        componentDidUpdate(prevProps: import("./withDraggable").WithDraggableProps): void;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getMousePosition(ev: TouchEvent | MouseEvent): Point;
        onMouseTouchDown: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchMove: (e: TouchEvent | MouseEvent) => void;
        onMouseTouchUp: (e: TouchEvent | MouseEvent) => void;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<SVGPolylineProps & React.RefAttributes<SVGPolylineElement> & import("./withDraggable").WithDraggableProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
