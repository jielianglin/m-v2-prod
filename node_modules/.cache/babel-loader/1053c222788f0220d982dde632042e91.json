{"ast":null,"code":"var _jsxFileName = \"/Users/jielianglin/Desktop/projects/m-v2-prod/src/components/upload/annotation/Annotator.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactLassoSelect, { getCanvas } from 'react-lasso-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Annotator() {\n  _s();\n\n  const src = \"./sample/Sample.jpg\";\n  const [points, setPoints] = React.useState([]);\n  const [clippedImg, setClippedImg] = React.useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ReactLassoSelect, {\n      value: points,\n      src: src,\n      imageStyle: {\n        width: \"400px\"\n      },\n      onChange: path => {\n        setPoints(path);\n      },\n      onComplete: path => {\n        if (!path.length) return;\n        getCanvas(src, path, (err, canvas) => {\n          if (!err) {\n            setClippedImg(canvas.toDataURL());\n          }\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Points: \", points.map(({\n        x,\n        y\n      }) => `${x},${y}`).join(\" \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: clippedImg,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Annotator, \"UVIVkTiAO10QKihkT0vIg3p25EA=\");\n\n_c = Annotator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Annotator\");","map":{"version":3,"sources":["/Users/jielianglin/Desktop/projects/m-v2-prod/src/components/upload/annotation/Annotator.tsx"],"names":["React","ReactLassoSelect","getCanvas","Annotator","src","points","setPoints","useState","clippedImg","setClippedImg","width","path","length","err","canvas","toDataURL","map","x","y","join"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,IAA2BC,SAA3B,QAA4C,oBAA5C;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAChC,QAAMC,GAAG,GAAG,qBAAZ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAA2C,EAA3C,CAA5B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,KAAK,CAACO,QAAN,EAApC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,gBAAD;AACI,MAAA,KAAK,EAAEF,MADX;AAEI,MAAA,GAAG,EAAED,GAFT;AAGI,MAAA,UAAU,EAAE;AAAEM,QAAAA,KAAK,EAAE;AAAT,OAHhB;AAII,MAAA,QAAQ,EAAGC,IAAD,IAAU;AAChBL,QAAAA,SAAS,CAACK,IAAD,CAAT;AACH,OANL;AAOI,MAAA,UAAU,EAAGA,IAAD,IAAU;AAClB,YAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAClBV,QAAAA,SAAS,CAACE,GAAD,EAAMO,IAAN,EAAY,CAACE,GAAD,EAAMC,MAAN,KAAiB;AAClC,cAAI,CAACD,GAAL,EAAU;AACNJ,YAAAA,aAAa,CAACK,MAAM,CAACC,SAAP,EAAD,CAAb;AACH;AACJ,SAJQ,CAAT;AAKH;AAdL;AAAA;AAAA;AAAA;AAAA,YADJ,eAiBI;AAAA,6BAAcV,MAAM,CAACW,GAAP,CAAW,CAAC;AAAEC,QAAAA,CAAF;AAAKC,QAAAA;AAAL,OAAD,KAAe,GAAED,CAAE,IAAGC,CAAE,EAAnC,EAAsCC,IAAtC,CAA2C,GAA3C,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ,eAkBI;AAAA,6BACI;AAAK,QAAA,GAAG,EAAEX,UAAV;AAAsB,QAAA,GAAG,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GA7BuBL,S;;KAAAA,S","sourcesContent":["import React from \"react\";\nimport ReactLassoSelect, { getCanvas } from 'react-lasso-select';\n\nexport default function Annotator() {\n    const src = \"./sample/Sample.jpg\";\n    const [points, setPoints] = React.useState<{ x: number; y: number }[]>([]);\n    const [clippedImg, setClippedImg] = React.useState<string>();\n\n    return (\n        <div className=\"App\">\n            <ReactLassoSelect\n                value={points}\n                src={src}\n                imageStyle={{ width: \"400px\" }}\n                onChange={(path) => {\n                    setPoints(path);\n                }}\n                onComplete={(path) => {\n                    if (!path.length) return;\n                    getCanvas(src, path, (err, canvas) => {\n                        if (!err) {\n                            setClippedImg(canvas.toDataURL());\n                        }\n                    });\n                }}\n            />\n            <div>Points: {points.map(({ x, y }) => `${x},${y}`).join(\" \")}</div>\n            <div>\n                <img src={clippedImg} alt=\"\" />\n            </div>\n        </div>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}