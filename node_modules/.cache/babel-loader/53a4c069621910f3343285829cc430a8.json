{"ast":null,"code":"var _jsxFileName = \"/Users/jielianglin/Desktop/projects/m-v2-prod/src/components/upload/annotation/AnnotatorII.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport ReactLassoSelect, { getCanvas } from 'react-lasso-select';\nimport Sample from \"./sample/Sample.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const src = \"./sample/Sample.jpg\";\n  const [points, setPoints] = useState([]);\n  const [clippedImg, setClippedImg] = useState();\n  const [show, setShow] = useState(false);\n\n  if (show) {\n    /*#__PURE__*/\n    _jsxDEV(ReactLassoSelect, {\n      value: points,\n      src: src,\n      onChange: value => {\n        setPoints(value);\n      },\n      onComplete: value => {\n        if (!value.length) return;\n        getCanvas(src, value, (err, canvas) => {\n          if (!err) {\n            setClippedImg(canvas.toDataURL());\n            setShow(true);\n          }\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 1\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: clippedImg,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n_s(App, \"JiXmcOkbaJqex/5ZAUm8CpV/FoI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jielianglin/Desktop/projects/m-v2-prod/src/components/upload/annotation/AnnotatorII.js"],"names":["useState","ReactLassoSelect","getCanvas","Sample","App","src","points","setPoints","clippedImg","setClippedImg","show","setShow","value","length","err","canvas","toDataURL"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,gBAAP,IAA2BC,SAA3B,QAA4C,oBAA5C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,eAAe,SAASC,GAAT,GAAgB;AAAA;;AAC7B,QAAMC,GAAG,GAAC,qBAAV;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,EAA5C;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAiBX,QAAQ,CAAC,KAAD,CAA/B;;AAEA,MAAIU,IAAJ,EAAU;AACZ;AAAA,YAAC,gBAAD;AACQ,MAAA,KAAK,EAAEJ,MADf;AAEQ,MAAA,GAAG,EAAED,GAFb;AAGQ,MAAA,QAAQ,EAAEO,KAAK,IAAI;AACjBL,QAAAA,SAAS,CAACK,KAAD,CAAT;AACD,OALT;AAMQ,MAAA,UAAU,EAAEA,KAAK,IAAI;AACnB,YAAI,CAACA,KAAK,CAACC,MAAX,EAAmB;AACnBX,QAAAA,SAAS,CAACG,GAAD,EAAMO,KAAN,EAAa,CAACE,GAAD,EAAMC,MAAN,KAAiB;AACrC,cAAI,CAACD,GAAL,EAAU;AACRL,YAAAA,aAAa,CAACM,MAAM,CAACC,SAAP,EAAD,CAAb;AACAL,YAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,SALQ,CAAT;AAMD;AAdT;AAAA;AAAA;AAAA;AAAA;AAgBG,GAjBD,MAiBO;AAAC,wBAEN;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BAKE;AAAA,+BACE;AAAK,UAAA,GAAG,EAAEH,UAAV;AAAsB,UAAA,GAAG,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YAFM;AAWL;AACJ;;GAnCuBJ,G;;KAAAA,G","sourcesContent":["import { useState } from 'react';\nimport ReactLassoSelect, { getCanvas } from 'react-lasso-select';\nimport Sample from \"./sample/Sample.jpg\";\n\nexport default function App () {\n  const src=\"./sample/Sample.jpg\"; \n  const [points, setPoints] = useState([]);\n  const [clippedImg, setClippedImg] = useState();\n  const [show, setShow] =useState(false); \n  \n  if (show) {\n<ReactLassoSelect\n        value={points}\n        src={src}\n        onChange={value => {\n          setPoints(value);\n        }}\n        onComplete={value => {\n          if (!value.length) return;\n          getCanvas(src, value, (err, canvas) => {\n            if (!err) {\n              setClippedImg(canvas.toDataURL());\n              setShow(true);\n            }\n          });\n        }}\n      />\n  } else {return (\n    \n    <div className=\"App\"> \n   {/*<div>\n    Points: {points.map(({x, y}) => `${x},${y}`).join(' ')}\n    </div>*/}\n\n      <div>\n        <img src={clippedImg} alt=\"\" />\n      </div>\n    </div>\n  );}\n}"]},"metadata":{},"sourceType":"module"}