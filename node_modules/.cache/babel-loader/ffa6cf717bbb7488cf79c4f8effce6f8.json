{"ast":null,"code":"import { defineHidden, is, createInterpolator, eachProp, hasFluidValue, getFluidValue, each, isAnimatedString, useForceUpdate, useLayoutEffect, addFluidObserver, removeFluidObserver, raf, useOnce } from '@react-spring/shared';\nimport { forwardRef, useRef, useCallback, useEffect, createElement } from 'react';\nconst $node = Symbol.for(\"Animated:node\");\n\nconst isAnimated = value => !!value && value[$node] === value;\n\nconst getAnimated = owner => owner && owner[$node];\n\nconst setAnimated = (owner, node) => defineHidden(owner, $node, node);\n\nconst getPayload = owner => owner && owner[$node] && owner[$node].getPayload();\n\nclass Animated {\n  constructor() {\n    setAnimated(this, this);\n  }\n\n  getPayload() {\n    return this.payload || [];\n  }\n\n}\n\nclass AnimatedValue extends Animated {\n  constructor(_value) {\n    super();\n    this._value = _value;\n    this.done = true;\n    this.durationProgress = 0;\n\n    if (is.num(this._value)) {\n      this.lastPosition = this._value;\n    }\n  }\n\n  static create(value) {\n    return new AnimatedValue(value);\n  }\n\n  getPayload() {\n    return [this];\n  }\n\n  getValue() {\n    return this._value;\n  }\n\n  setValue(value, step) {\n    if (is.num(value)) {\n      this.lastPosition = value;\n\n      if (step) {\n        value = Math.round(value / step) * step;\n\n        if (this.done) {\n          this.lastPosition = value;\n        }\n      }\n    }\n\n    if (this._value === value) {\n      return false;\n    }\n\n    this._value = value;\n    return true;\n  }\n\n  reset() {\n    const {\n      done\n    } = this;\n    this.done = false;\n\n    if (is.num(this._value)) {\n      this.elapsedTime = 0;\n      this.durationProgress = 0;\n      this.lastPosition = this._value;\n      if (done) this.lastVelocity = null;\n      this.v0 = null;\n    }\n  }\n\n}\n\nclass AnimatedString extends AnimatedValue {\n  constructor(value) {\n    super(0);\n    this._string = null;\n    this._toString = createInterpolator({\n      output: [value, value]\n    });\n  }\n\n  static create(value) {\n    return new AnimatedString(value);\n  }\n\n  getValue() {\n    let value = this._string;\n    return value == null ? this._string = this._toString(this._value) : value;\n  }\n\n  setValue(value) {\n    if (is.str(value)) {\n      if (value == this._string) {\n        return false;\n      }\n\n      this._string = value;\n      this._value = 1;\n    } else if (super.setValue(value)) {\n      this._string = null;\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  reset(goal) {\n    if (goal) {\n      this._toString = createInterpolator({\n        output: [this.getValue(), goal]\n      });\n    }\n\n    this._value = 0;\n    super.reset();\n  }\n\n}\n\nconst TreeContext = {\n  dependencies: null\n};\n\nclass AnimatedObject extends Animated {\n  constructor(source) {\n    super();\n    this.source = source;\n    this.setValue(source);\n  }\n\n  getValue(animated) {\n    const values = {};\n    eachProp(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated);\n      } else if (hasFluidValue(source)) {\n        values[key] = getFluidValue(source);\n      } else if (!animated) {\n        values[key] = source;\n      }\n    });\n    return values;\n  }\n\n  setValue(source) {\n    this.source = source;\n    this.payload = this._makePayload(source);\n  }\n\n  reset() {\n    if (this.payload) {\n      each(this.payload, node => node.reset());\n    }\n  }\n\n  _makePayload(source) {\n    if (source) {\n      const payload = new Set();\n      eachProp(source, this._addToPayload, payload);\n      return Array.from(payload);\n    }\n  }\n\n  _addToPayload(source) {\n    if (TreeContext.dependencies && hasFluidValue(source)) {\n      TreeContext.dependencies.add(source);\n    }\n\n    const payload = getPayload(source);\n\n    if (payload) {\n      each(payload, node => this.add(node));\n    }\n  }\n\n}\n\nclass AnimatedArray extends AnimatedObject {\n  constructor(source) {\n    super(source);\n  }\n\n  static create(source) {\n    return new AnimatedArray(source);\n  }\n\n  getValue() {\n    return this.source.map(node => node.getValue());\n  }\n\n  setValue(source) {\n    const payload = this.getPayload();\n\n    if (source.length == payload.length) {\n      return payload.some((node, i) => node.setValue(source[i]));\n    }\n\n    super.setValue(source.map(makeAnimated));\n    return true;\n  }\n\n}\n\nfunction makeAnimated(value) {\n  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;\n  return nodeType.create(value);\n}\n\nfunction getAnimatedType(value) {\n  const parentNode = getAnimated(value);\n  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;\n}\n\nconst withAnimated = (Component, host) => {\n  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n  return forwardRef((givenProps, givenRef) => {\n    const instanceRef = useRef(null);\n    const ref = hasInstance && useCallback(value => {\n      instanceRef.current = updateRef(givenRef, value);\n    }, [givenRef]);\n    const [props, deps] = getAnimatedState(givenProps, host);\n    const forceUpdate = useForceUpdate();\n\n    const callback = () => {\n      const instance = instanceRef.current;\n\n      if (hasInstance && !instance) {\n        return;\n      }\n\n      const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    };\n\n    const observer = new PropsObserver(callback, deps);\n    const observerRef = useRef();\n    useLayoutEffect(() => {\n      const lastObserver = observerRef.current;\n      observerRef.current = observer;\n      each(deps, dep => addFluidObserver(dep, observer));\n\n      if (lastObserver) {\n        each(lastObserver.deps, dep => removeFluidObserver(dep, lastObserver));\n        raf.cancel(lastObserver.update);\n      }\n    });\n    useEffect(callback, []);\n    useOnce(() => () => {\n      const observer2 = observerRef.current;\n      each(observer2.deps, dep => removeFluidObserver(dep, observer2));\n    });\n    const usedProps = host.getComponentProps(props.getValue());\n    return /* @__PURE__ */createElement(Component, { ...usedProps,\n      ref\n    });\n  });\n};\n\nclass PropsObserver {\n  constructor(update, deps) {\n    this.update = update;\n    this.deps = deps;\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      raf.write(this.update);\n    }\n  }\n\n}\n\nfunction getAnimatedState(props, host) {\n  const dependencies = new Set();\n  TreeContext.dependencies = dependencies;\n  if (props.style) props = { ...props,\n    style: host.createAnimatedStyle(props.style)\n  };\n  props = new AnimatedObject(props);\n  TreeContext.dependencies = null;\n  return [props, dependencies];\n}\n\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is.fun(ref)) ref(value);else ref.current = value;\n  }\n\n  return value;\n}\n\nconst cacheKey = Symbol.for(\"AnimatedComponent\");\n\nconst createHost = (components, {\n  applyAnimatedValues = () => false,\n  createAnimatedStyle = style => new AnimatedObject(style),\n  getComponentProps = props => props\n} = {}) => {\n  const hostConfig = {\n    applyAnimatedValues,\n    createAnimatedStyle,\n    getComponentProps\n  };\n\n  const animated = Component => {\n    const displayName = getDisplayName(Component) || \"Anonymous\";\n\n    if (is.str(Component)) {\n      Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n\n    Component.displayName = `Animated(${displayName})`;\n    return Component;\n  };\n\n  eachProp(components, (Component, key) => {\n    if (is.arr(components)) {\n      key = getDisplayName(Component);\n    }\n\n    animated[key] = animated(Component);\n  });\n  return {\n    animated\n  };\n};\n\nconst getDisplayName = arg => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;\n\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedValue, createHost, getAnimated, getAnimatedType, getPayload, isAnimated, setAnimated };","map":{"version":3,"sources":["src/Animated.ts","src/AnimatedValue.ts","src/AnimatedString.ts","src/context.ts","src/AnimatedObject.ts","src/AnimatedArray.ts","src/getAnimatedType.ts","src/withAnimated.tsx","src/createHost.ts"],"names":["AnimatedString2","AnimatedValue2","AnimatedArray2","AnimatedObject2","withAnimated2"],"mappings":"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","sourcesContent":["import { defineHidden, is, createInterpolator, eachProp, hasFluidValue, getFluidValue, each, isAnimatedString, useForceUpdate, useLayoutEffect, addFluidObserver, removeFluidObserver, raf, useOnce } from '@react-spring/shared';\nimport { forwardRef, useRef, useCallback, useEffect, createElement } from 'react';\n\nconst $node = Symbol.for(\"Animated:node\");\nconst isAnimated = (value) => !!value && value[$node] === value;\nconst getAnimated = (owner) => owner && owner[$node];\nconst setAnimated = (owner, node) => defineHidden(owner, $node, node);\nconst getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();\nclass Animated {\n  constructor() {\n    setAnimated(this, this);\n  }\n  getPayload() {\n    return this.payload || [];\n  }\n}\n\nclass AnimatedValue extends Animated {\n  constructor(_value) {\n    super();\n    this._value = _value;\n    this.done = true;\n    this.durationProgress = 0;\n    if (is.num(this._value)) {\n      this.lastPosition = this._value;\n    }\n  }\n  static create(value) {\n    return new AnimatedValue(value);\n  }\n  getPayload() {\n    return [this];\n  }\n  getValue() {\n    return this._value;\n  }\n  setValue(value, step) {\n    if (is.num(value)) {\n      this.lastPosition = value;\n      if (step) {\n        value = Math.round(value / step) * step;\n        if (this.done) {\n          this.lastPosition = value;\n        }\n      }\n    }\n    if (this._value === value) {\n      return false;\n    }\n    this._value = value;\n    return true;\n  }\n  reset() {\n    const {done} = this;\n    this.done = false;\n    if (is.num(this._value)) {\n      this.elapsedTime = 0;\n      this.durationProgress = 0;\n      this.lastPosition = this._value;\n      if (done)\n        this.lastVelocity = null;\n      this.v0 = null;\n    }\n  }\n}\n\nclass AnimatedString extends AnimatedValue {\n  constructor(value) {\n    super(0);\n    this._string = null;\n    this._toString = createInterpolator({\n      output: [value, value]\n    });\n  }\n  static create(value) {\n    return new AnimatedString(value);\n  }\n  getValue() {\n    let value = this._string;\n    return value == null ? this._string = this._toString(this._value) : value;\n  }\n  setValue(value) {\n    if (is.str(value)) {\n      if (value == this._string) {\n        return false;\n      }\n      this._string = value;\n      this._value = 1;\n    } else if (super.setValue(value)) {\n      this._string = null;\n    } else {\n      return false;\n    }\n    return true;\n  }\n  reset(goal) {\n    if (goal) {\n      this._toString = createInterpolator({\n        output: [this.getValue(), goal]\n      });\n    }\n    this._value = 0;\n    super.reset();\n  }\n}\n\nconst TreeContext = {dependencies: null};\n\nclass AnimatedObject extends Animated {\n  constructor(source) {\n    super();\n    this.source = source;\n    this.setValue(source);\n  }\n  getValue(animated) {\n    const values = {};\n    eachProp(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated);\n      } else if (hasFluidValue(source)) {\n        values[key] = getFluidValue(source);\n      } else if (!animated) {\n        values[key] = source;\n      }\n    });\n    return values;\n  }\n  setValue(source) {\n    this.source = source;\n    this.payload = this._makePayload(source);\n  }\n  reset() {\n    if (this.payload) {\n      each(this.payload, (node) => node.reset());\n    }\n  }\n  _makePayload(source) {\n    if (source) {\n      const payload = new Set();\n      eachProp(source, this._addToPayload, payload);\n      return Array.from(payload);\n    }\n  }\n  _addToPayload(source) {\n    if (TreeContext.dependencies && hasFluidValue(source)) {\n      TreeContext.dependencies.add(source);\n    }\n    const payload = getPayload(source);\n    if (payload) {\n      each(payload, (node) => this.add(node));\n    }\n  }\n}\n\nclass AnimatedArray extends AnimatedObject {\n  constructor(source) {\n    super(source);\n  }\n  static create(source) {\n    return new AnimatedArray(source);\n  }\n  getValue() {\n    return this.source.map((node) => node.getValue());\n  }\n  setValue(source) {\n    const payload = this.getPayload();\n    if (source.length == payload.length) {\n      return payload.some((node, i) => node.setValue(source[i]));\n    }\n    super.setValue(source.map(makeAnimated));\n    return true;\n  }\n}\nfunction makeAnimated(value) {\n  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;\n  return nodeType.create(value);\n}\n\nfunction getAnimatedType(value) {\n  const parentNode = getAnimated(value);\n  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;\n}\n\nconst withAnimated = (Component, host) => {\n  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n  return forwardRef((givenProps, givenRef) => {\n    const instanceRef = useRef(null);\n    const ref = hasInstance && useCallback((value) => {\n      instanceRef.current = updateRef(givenRef, value);\n    }, [givenRef]);\n    const [props, deps] = getAnimatedState(givenProps, host);\n    const forceUpdate = useForceUpdate();\n    const callback = () => {\n      const instance = instanceRef.current;\n      if (hasInstance && !instance) {\n        return;\n      }\n      const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    };\n    const observer = new PropsObserver(callback, deps);\n    const observerRef = useRef();\n    useLayoutEffect(() => {\n      const lastObserver = observerRef.current;\n      observerRef.current = observer;\n      each(deps, (dep) => addFluidObserver(dep, observer));\n      if (lastObserver) {\n        each(lastObserver.deps, (dep) => removeFluidObserver(dep, lastObserver));\n        raf.cancel(lastObserver.update);\n      }\n    });\n    useEffect(callback, []);\n    useOnce(() => () => {\n      const observer2 = observerRef.current;\n      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));\n    });\n    const usedProps = host.getComponentProps(props.getValue());\n    return /* @__PURE__ */ createElement(Component, {\n      ...usedProps,\n      ref\n    });\n  });\n};\nclass PropsObserver {\n  constructor(update, deps) {\n    this.update = update;\n    this.deps = deps;\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      raf.write(this.update);\n    }\n  }\n}\nfunction getAnimatedState(props, host) {\n  const dependencies = new Set();\n  TreeContext.dependencies = dependencies;\n  if (props.style)\n    props = {\n      ...props,\n      style: host.createAnimatedStyle(props.style)\n    };\n  props = new AnimatedObject(props);\n  TreeContext.dependencies = null;\n  return [props, dependencies];\n}\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is.fun(ref))\n      ref(value);\n    else\n      ref.current = value;\n  }\n  return value;\n}\n\nconst cacheKey = Symbol.for(\"AnimatedComponent\");\nconst createHost = (components, {\n  applyAnimatedValues = () => false,\n  createAnimatedStyle = (style) => new AnimatedObject(style),\n  getComponentProps = (props) => props\n} = {}) => {\n  const hostConfig = {\n    applyAnimatedValues,\n    createAnimatedStyle,\n    getComponentProps\n  };\n  const animated = (Component) => {\n    const displayName = getDisplayName(Component) || \"Anonymous\";\n    if (is.str(Component)) {\n      Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n    Component.displayName = `Animated(${displayName})`;\n    return Component;\n  };\n  eachProp(components, (Component, key) => {\n    if (is.arr(components)) {\n      key = getDisplayName(Component);\n    }\n    animated[key] = animated(Component);\n  });\n  return {\n    animated\n  };\n};\nconst getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;\n\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedValue, createHost, getAnimated, getAnimatedType, getPayload, isAnimated, setAnimated };\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"module"}