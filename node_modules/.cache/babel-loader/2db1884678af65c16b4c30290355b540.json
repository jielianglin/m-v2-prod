{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nconst Enums_1 = require(\"./Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nfunction polygonBounce(particle) {\n  particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n  particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n}\n\nfunction drawPolygonMask(context, rawData, stroke) {\n  const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n  if (!color) {\n    return;\n  }\n\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n\n  for (const item of rawData) {\n    context.lineTo(item.x, item.y);\n  }\n\n  context.closePath();\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\n\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n  if (!color) {\n    return;\n  }\n\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\n\nfunction parsePaths(paths, scale, offset) {\n  const res = [];\n\n  for (const path of paths) {\n    const segments = path.element.pathSegList;\n    const len = segments.numberOfItems;\n    const p = {\n      x: 0,\n      y: 0\n    };\n\n    for (let i = 0; i < len; i++) {\n      const segment = segments.getItem(i);\n      const svgPathSeg = window.SVGPathSeg;\n\n      switch (segment.pathSegType) {\n        case svgPathSeg.PATHSEG_MOVETO_ABS:\n        case svgPathSeg.PATHSEG_LINETO_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n        case svgPathSeg.PATHSEG_ARC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n          {\n            const absSeg = segment;\n            p.x = absSeg.x;\n            p.y = absSeg.y;\n            break;\n          }\n\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n          p.x = segment.x;\n          break;\n\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n          p.y = segment.y;\n          break;\n\n        case svgPathSeg.PATHSEG_LINETO_REL:\n        case svgPathSeg.PATHSEG_MOVETO_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n        case svgPathSeg.PATHSEG_ARC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n          {\n            const relSeg = segment;\n            p.x += relSeg.x;\n            p.y += relSeg.y;\n            break;\n          }\n\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n          p.x += segment.x;\n          break;\n\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n          p.y += segment.y;\n          break;\n\n        case svgPathSeg.PATHSEG_UNKNOWN:\n        case svgPathSeg.PATHSEG_CLOSEPATH:\n          continue;\n      }\n\n      res.push({\n        x: p.x * scale + offset.x,\n        y: p.y * scale + offset.y\n      });\n    }\n  }\n\n  return res;\n}\n\nclass PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  initAsync(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n      const polygonMaskOptions = this.options;\n      this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n      if (polygonMaskOptions.enable) {\n        yield this.initRawData();\n      }\n    });\n  }\n\n  resize() {\n    const container = this.container;\n    const options = this.options;\n\n    if (!(options.enable && options.type !== Enums_1.Type.none)) {\n      return;\n    }\n\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n\n    this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n      yield this.initRawData(true);\n      container.particles.redraw();\n    }), 250);\n  }\n\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n\n  particlesInitialization() {\n    const options = this.options;\n\n    if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n      this.drawPoints();\n      return true;\n    }\n\n    return false;\n  }\n\n  particlePosition(position) {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n\n    return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n  }\n\n  particleBounce(particle) {\n    const options = this.options;\n\n    if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n      if (!this.checkInsidePolygon(particle.getPosition())) {\n        polygonBounce(particle);\n        return true;\n      }\n    } else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n      const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n\n      if (dist > this.polygonMaskMoveRadius) {\n        polygonBounce(particle);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n  }\n\n  draw(context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    const options = this.options;\n    const polygonDraw = options.draw;\n\n    if (!(options.enable && polygonDraw.enable)) {\n      return;\n    }\n\n    const rawData = this.raw;\n\n    for (const path of this.paths) {\n      const path2d = path.path2d;\n      const path2dSupported = this.path2DSupported;\n\n      if (!context) {\n        continue;\n      }\n\n      if (path2dSupported && path2d && this.offset) {\n        drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n\n  checkInsidePolygon(position) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = this.options;\n\n    if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Utils_1.Constants.noPolygonFound);\n    }\n\n    const canvasSize = container.canvas.size;\n    const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n    const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i];\n      const pj = this.raw[j];\n      const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n  }\n\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const container = this.container;\n    const options = this.options;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, \"image/svg+xml\");\n    const svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    const pxRatio = container.retina.pixelRatio;\n    const scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return parsePaths(this.paths, scale, this.offset);\n  }\n\n  downloadSvgPath(svgUrl, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = this.options;\n      const url = svgUrl || options.url;\n      const forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (!url || this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      const req = yield fetch(url);\n\n      if (!req.ok) {\n        throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n      }\n\n      return this.parseSvgPath(yield req.text(), force);\n    });\n  }\n\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n\n  randomPoint() {\n    const container = this.container;\n    const options = this.options;\n    let position;\n\n    if (options.type === Enums_1.Type.inline) {\n      switch (options.inline.arrangement) {\n        case Enums_1.InlineArrangement.randomPoint:\n          position = this.getRandomPoint();\n          break;\n\n        case Enums_1.InlineArrangement.randomLength:\n          position = this.getRandomPointByLength();\n          break;\n\n        case Enums_1.InlineArrangement.equidistant:\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n\n        case Enums_1.InlineArrangement.onePerPoint:\n        case Enums_1.InlineArrangement.perPoint:\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = Utils_1.Utils.itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPointByLength() {\n    var _a, _b, _c;\n\n    const options = this.options;\n\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const path = Utils_1.Utils.itemFromArray(this.paths);\n    const distance = Math.floor(Math.random() * path.length) + 1;\n    const point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const options = this.container.actualOptions;\n    const polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    let offset = 0;\n    let point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n    const distance = totalLength / options.particles.number.value;\n\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  createPath2D() {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        const path2d = new Path2D(pathData);\n        const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        const finalPath = new Path2D();\n        const transform = matrix.scale(options.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n\n  initRawData(force) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = this.options;\n\n      if (options.url) {\n        this.raw = yield this.downloadSvgPath(options.url, force);\n      } else if (options.data) {\n        const data = options.data;\n        let svg;\n\n        if (typeof data !== \"string\") {\n          const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n          const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n          svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n        } else {\n          svg = data;\n        }\n\n        this.raw = this.parseSvgPath(svg, force);\n      }\n\n      this.createPath2D();\n    });\n  }\n\n}\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"sources":["/Users/jielianglin/Desktop/projects/m-v2-prod/node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","PolygonMaskInstance","Enums_1","require","Utils_1","PolygonMask_1","polygonBounce","particle","velocity","x","y","drawPolygonMask","context","rawData","stroke","color","ColorUtils","colorToRgb","beginPath","moveTo","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","constructor","container","dimension","height","path2DSupported","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","particlesInitialization","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","particlePosition","_a","_b","length","Utils","deepExtend","randomPoint","particleBounce","checkInsidePolygon","getPosition","initialPosition","dist","NumberUtils","getDistance","clickPositionValid","draw","polygonDraw","path2d","path2dSupported","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","j","pi","pj","intersect","outside","parseSvgPath","xml","force","_c","forceDownload","undefined","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","distance","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","pos","data","Array","map","t","join","namespaces"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nfunction polygonBounce(particle) {\n    particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n}\nfunction drawPolygonMask(context, rawData, stroke) {\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList;\n        const len = segments.numberOfItems;\n        const p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    initAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            const polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (polygonMaskOptions.enable) {\n                yield this.initRawData();\n            }\n        });\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.initRawData(true);\n            container.particles.redraw();\n        }), 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle) {\n        const options = this.options;\n        if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n            if (!this.checkInsidePolygon(particle.getPosition())) {\n                polygonBounce(particle);\n                return true;\n            }\n        }\n        else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                polygonBounce(particle);\n                return true;\n            }\n        }\n        return false;\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    downloadSvgPath(svgUrl, force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            const url = svgUrl || options.url;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (!url || (this.paths !== undefined && !forceDownload)) {\n                return this.raw;\n            }\n            const req = yield fetch(url);\n            if (!req.ok) {\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            }\n            return this.parseSvgPath(yield req.text(), force);\n        });\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = Utils_1.Utils.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = Utils_1.Utils.itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    initRawData(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            if (options.url) {\n                this.raw = yield this.downloadSvgPath(options.url, force);\n            }\n            else if (options.data) {\n                const data = options.data;\n                let svg;\n                if (typeof data !== \"string\") {\n                    const path = data.path instanceof Array\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                        : `<path d=\"${data.path}\" />`;\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                }\n                else {\n                    svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n            }\n            this.createPath2D();\n        });\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"]},"metadata":{},"sourceType":"script"}