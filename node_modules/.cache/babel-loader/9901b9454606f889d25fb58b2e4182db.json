{"ast":null,"code":"var _jsxFileName = \"/Users/jielianglin/Desktop/projects/m-v2-prod/src/components/upload/annotation/P5Lasso.js\";\nimport React from 'react';\nimport Sketch from 'react-p5';\nimport Sample from './sample/Sample.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet penSize = 5;\nlet penState = 0;\nlet init;\nvar x, y, px, py;\nvar paths = [];\nvar currentPath = [];\nlet colorPicker;\nlet img;\nlet pg;\nexport default function Vector() {\n  const preload = p5 => {\n    img = p5.loadImage(`${Sample}`);\n  };\n\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(600, 600).parent(canvasParentRef);\n    pg = p5.createGraphics(600, 600);\n    colorPicker = p5.createColorPicker('#ed225d');\n    colorPicker.position(p5.width / 3, p5.height - 20);\n  };\n\n  const draw = p5 => {\n    x = p5.mouseX;\n    y = p5.mouseY;\n    px = p5.pmouseX;\n    py = p5.pmouseY;\n    color = pg.colorInput.value;\n    p5.image(img, 0, 0);\n    pg.strokeWeight(penSize);\n\n    if (p5.mouseIsPressed) {\n      if (penState === 0) {\n        pg.stroke(colorPicker.color());\n        pg.line(x, y, px, py);\n        currentPath.push([x, y]);\n        init = currentPath[0];\n        console.log(init);\n        const info = {\n          x: x,\n          y: y,\n          color: color\n        };\n        console.log(info);\n      }\n    }\n\n    p5.image(pg, 0, 0);\n  };\n\n  const mouseReleased = () => {\n    pg.line(x, y, ...init);\n    currentPath = [];\n    paths.push(currentPath);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    preload: preload,\n    setup: setup,\n    draw: draw,\n    mouseReleased: mouseReleased\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 13\n  }, this);\n}\n_c = Vector;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vector\");","map":{"version":3,"sources":["/Users/jielianglin/Desktop/projects/m-v2-prod/src/components/upload/annotation/P5Lasso.js"],"names":["React","Sketch","Sample","penSize","penState","init","x","y","px","py","paths","currentPath","colorPicker","img","pg","Vector","preload","p5","loadImage","setup","canvasParentRef","createCanvas","parent","createGraphics","createColorPicker","position","width","height","draw","mouseX","mouseY","pmouseX","pmouseY","color","colorInput","value","image","strokeWeight","mouseIsPressed","stroke","line","push","console","log","info","mouseReleased"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,IAAIC,OAAO,GAAG,CAAd;AACA,IAAIC,QAAQ,GAAG,CAAf;AAEA,IAAIC,IAAJ;AACA,IAAIC,CAAJ,EAAOC,CAAP,EAAUC,EAAV,EAAcC,EAAd;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,WAAW,GAAG,EAAlB;AAGA,IAAIC,WAAJ;AAEA,IAAIC,GAAJ;AACA,IAAIC,EAAJ;AAEA,eAAe,SAASC,MAAT,GAAiB;AAE5B,QAAMC,OAAO,GAAGC,EAAE,IAAI;AACtBJ,IAAAA,GAAG,GAAGI,EAAE,CAACC,SAAH,CAAc,GAAEhB,MAAO,EAAvB,CAAN;AACC,GAFD;;AAIA,QAAMiB,KAAK,GAAG,CAACF,EAAD,EAAKG,eAAL,KAAyB;AACnCH,IAAAA,EAAE,CAACI,YAAH,CAAgB,GAAhB,EAAoB,GAApB,EAAyBC,MAAzB,CAAgCF,eAAhC;AACAN,IAAAA,EAAE,GAAGG,EAAE,CAACM,cAAH,CAAkB,GAAlB,EAAuB,GAAvB,CAAL;AACAX,IAAAA,WAAW,GAAGK,EAAE,CAACO,iBAAH,CAAqB,SAArB,CAAd;AACAZ,IAAAA,WAAW,CAACa,QAAZ,CAAqBR,EAAE,CAACS,KAAH,GAAS,CAA9B,EAAiCT,EAAE,CAACU,MAAH,GAAU,EAA3C;AACH,GALD;;AAOA,QAAMC,IAAI,GAAGX,EAAE,IAAI;AACfX,IAAAA,CAAC,GAAGW,EAAE,CAACY,MAAP;AACAtB,IAAAA,CAAC,GAAGU,EAAE,CAACa,MAAP;AACAtB,IAAAA,EAAE,GAAGS,EAAE,CAACc,OAAR;AACAtB,IAAAA,EAAE,GAAGQ,EAAE,CAACe,OAAR;AACAC,IAAAA,KAAK,GAAGnB,EAAE,CAACoB,UAAH,CAAcC,KAAtB;AAEAlB,IAAAA,EAAE,CAACmB,KAAH,CAASvB,GAAT,EAAc,CAAd,EAAiB,CAAjB;AACAC,IAAAA,EAAE,CAACuB,YAAH,CAAgBlC,OAAhB;;AAEI,QAAIc,EAAE,CAACqB,cAAP,EAAsB;AACd,UAAIlC,QAAQ,KAAK,CAAjB,EAAmB;AACnBU,QAAAA,EAAE,CAACyB,MAAH,CAAU3B,WAAW,CAACqB,KAAZ,EAAV;AACAnB,QAAAA,EAAE,CAAC0B,IAAH,CAAQlC,CAAR,EAAWC,CAAX,EAAcC,EAAd,EAAkBC,EAAlB;AACAE,QAAAA,WAAW,CAAC8B,IAAZ,CAAiB,CAACnC,CAAD,EAAIC,CAAJ,CAAjB;AACAF,QAAAA,IAAI,GAAGM,WAAW,CAAC,CAAD,CAAlB;AACA+B,QAAAA,OAAO,CAACC,GAAR,CAAYtC,IAAZ;AACA,cAAMuC,IAAI,GAAG;AACTtC,UAAAA,CAAC,EAAEA,CADM;AAETC,UAAAA,CAAC,EAAEA,CAFM;AAGT0B,UAAAA,KAAK,EAAEA;AAHE,SAAb;AAKAS,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACH;AACJ;;AACD3B,IAAAA,EAAE,CAACmB,KAAH,CAAStB,EAAT,EAAa,CAAb,EAAgB,CAAhB;AACP,GA1BD;;AA4BA,QAAM+B,aAAa,GAAG,MAAM;AACxB/B,IAAAA,EAAE,CAAC0B,IAAH,CAAQlC,CAAR,EAAWC,CAAX,EAAc,GAAGF,IAAjB;AACAM,IAAAA,WAAW,GAAG,EAAd;AACAD,IAAAA,KAAK,CAAC+B,IAAN,CAAW9B,WAAX;AACH,GAJD;;AAMC,sBAAO,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEK,OAAjB;AAA0B,IAAA,KAAK,EAAEG,KAAjC;AAAwC,IAAA,IAAI,EAAES,IAA9C;AAAoD,IAAA,aAAa,EAAEiB;AAAnE;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;KAhDmB9B,M","sourcesContent":["import React from 'react'; \n\nimport Sketch from 'react-p5';\nimport Sample from './sample/Sample.jpg';\n\nlet penSize = 5;\nlet penState = 0;\n\nlet init; \nvar x, y, px, py;\nvar paths = [];\nvar currentPath = [];\n\n\nlet colorPicker;\n\nlet img; \nlet pg; \n\nexport default function Vector(){\n\n    const preload = p5 => {\n    img = p5.loadImage(`${Sample}`);\n    }\n\n    const setup = (p5, canvasParentRef) => {\n        p5.createCanvas(600,600).parent(canvasParentRef);\n        pg = p5.createGraphics(600, 600); \n        colorPicker = p5.createColorPicker('#ed225d');\n        colorPicker.position(p5.width/3, p5.height-20);         \n    }\n\n    const draw = p5 => {\n        x = p5.mouseX;\n        y = p5.mouseY;\n        px = p5.pmouseX;\n        py = p5.pmouseY;\n        color = pg.colorInput.value; \n\n        p5.image(img, 0, 0);\n        pg.strokeWeight(penSize); \n        \n            if (p5.mouseIsPressed){\n                    if (penState === 0){\n                    pg.stroke(colorPicker.color()); \n                    pg.line(x, y, px, py);\n                    currentPath.push([x, y]); \n                    init = currentPath[0]; \n                    console.log(init);\n                    const info = {\n                        x: x,\n                        y: y,\n                        color: color  \n                    } \n                    console.log(info);\n                }\n            }\n            p5.image(pg, 0, 0);\n    }\n\n    const mouseReleased = () => { \n        pg.line(x, y, ...init); \n        currentPath = []; \n        paths.push(currentPath); \n    }\n\n     return <Sketch preload={preload} setup={setup} draw={draw} mouseReleased={mouseReleased}/>  \n    }"]},"metadata":{},"sourceType":"module"}