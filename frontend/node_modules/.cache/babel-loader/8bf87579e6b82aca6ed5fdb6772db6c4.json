{"ast":null,"code":"var _jsxFileName = \"/Users/jielianglin/Desktop/projects/m-v2-prod/frontend/src/components/upload/annotation/P5Lasso.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Sketch from 'react-p5';\nimport ColorSelector from './ColorSelector';\nimport FileInput from '../FileInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar penState = 0;\nvar ellipseSize = 10;\nvar tightness = 6;\nvar initial_point;\nvar x;\nvar y;\nvar px;\nvar py;\nvar path = [];\nvar currentPath = [];\nvar preveiousPath = [];\nvar img;\nvar pg;\nvar weight;\nexport default function P5Lasso() {\n  _s();\n\n  const [color, setColor] = React.useState(['#ff0000']);\n  const [image, setImage] = React.useState(null);\n\n  function setup(p5, canvasParentRef) {\n    p5.createCanvas(600, 600).parent(canvasParentRef);\n    pg = p5.createGraphics(600, 600);\n    p5.framerate(10);\n    img = p5.loadImage(image, img => {\n      p5.image(img, 0, 0);\n    });\n  }\n\n  function draw(p5) {\n    x = p5.mouseX;\n    y = p5.mouseY;\n    px = p5.mouseX;\n    py = p5.mouseY;\n    p5.image(img, 0, 0);\n    pg.strokeWeight(15);\n\n    for (var i = 1; i < path.length; i++) {\n      var currentPath = path[i];\n      var previousPath = path[i - 1];\n      var distance = previous.dist(currentPath); //maybe use lerp for instead\n\n      var extraPoints = pg.round(distance / ellipseSize * tightness);\n      pg.ellipse(px, py, ellipseSize, ellipseSize);\n\n      for (var j = 0; j < extraPoints; j++) {\n        //work out a normalized (between 0.0 and 1.0) value of where each extra point should be\n        //think of this as a percentage along a line: 0.0 = start of line, 0.5 = 50% along the line, 1.0 = end of the line\n        var interpolation = pg.map(j, 0, extraPoints, 0.0, 1.0); //compute the point in between using PVector's linear interpolation (lerp()) functionality\n\n        var inbetween = pg.Vector.lerp(previousPath, currentPath, interpolation); //draw the point in between\n\n        pg.ellipse(inbetween.x, inbetween.y, ellipseSize, ellipseSize);\n      }\n    }\n\n    if (p5.mouseIsPressed === true) {\n      console.log(color);\n      pg.stroke(color);\n      path.push(pg.createVector(x, y));\n      initial_point = currentPath[0];\n      console.log(initial_point);\n    }\n\n    p5.image(pg, 0, 0);\n  }\n\n  function mouseReleased(p5) {\n    if (image) {\n      pg.line(px, py, ...initial_point);\n      currentPath = [];\n      path.push(currentPath);\n    }\n  }\n\n  if (image) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [image && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Sketch, {\n          setup: setup,\n          draw: draw,\n          mouseReleased: mouseReleased\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ColorSelector, {\n        selectColor: color => setColor(color)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(FileInput, {\n      selectImage: setImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(P5Lasso, \"lo/BMPVj4XUHEYds8caQUIfo3HA=\");\n\n_c = P5Lasso;\n\nvar _c;\n\n$RefreshReg$(_c, \"P5Lasso\");","map":{"version":3,"sources":["/Users/jielianglin/Desktop/projects/m-v2-prod/frontend/src/components/upload/annotation/P5Lasso.js"],"names":["React","Sketch","ColorSelector","FileInput","penState","ellipseSize","tightness","initial_point","x","y","px","py","path","currentPath","preveiousPath","img","pg","weight","P5Lasso","color","setColor","useState","image","setImage","setup","p5","canvasParentRef","createCanvas","parent","createGraphics","framerate","loadImage","draw","mouseX","mouseY","strokeWeight","i","length","previousPath","distance","previous","dist","extraPoints","round","ellipse","j","interpolation","map","inbetween","Vector","lerp","mouseIsPressed","console","log","stroke","push","createVector","mouseReleased","line"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Sketch from 'react-p5';\nimport ColorSelector from './ColorSelector';\nimport FileInput from '../FileInput';\n\nvar penState = 0;\nvar ellipseSize = 10;\nvar tightness = 6;\n\nvar initial_point;\nvar x;\nvar y;\nvar px;\nvar py;\nvar path = [];\nvar currentPath = [];\nvar preveiousPath = [];\nvar img;\nvar pg;\n\nvar weight;\n\n\nexport default function P5Lasso() {\n  const [color, setColor] = React.useState(['#ff0000']);\n  const [image, setImage] = React.useState(null);\n\n  function setup(p5, canvasParentRef) {\n    p5.createCanvas(600, 600).parent(canvasParentRef);\n    pg = p5.createGraphics(600, 600);\n    p5.framerate(10);\n    img = p5.loadImage(image, img => {\n      p5.image(img, 0, 0);\n    });\n  }\n\n  function draw(p5) {\n\n    x = p5.mouseX;\n    y = p5.mouseY;\n    px = p5.mouseX;\n    py = p5.mouseY;\n\n    p5.image(img, 0, 0);\n    pg.strokeWeight(15);\n\n    for (var i = 1; i < path.length; i++) {\n      var currentPath = path[i];\n      var previousPath = path[i - 1];\n\n      var distance = previous.dist(currentPath);\n      //maybe use lerp for instead\n\n      var extraPoints = pg.round(distance / ellipseSize * tightness);\n      pg.ellipse(px, py, ellipseSize, ellipseSize);\n\n      for (var j = 0; j < extraPoints; j++) {\n\n        //work out a normalized (between 0.0 and 1.0) value of where each extra point should be\n        //think of this as a percentage along a line: 0.0 = start of line, 0.5 = 50% along the line, 1.0 = end of the line\n        var interpolation = pg.map(j, 0, extraPoints, 0.0, 1.0);\n\n        //compute the point in between using PVector's linear interpolation (lerp()) functionality\n        var inbetween = pg.Vector.lerp(previousPath, currentPath, interpolation);\n\n        //draw the point in between\n        pg.ellipse(inbetween.x, inbetween.y, ellipseSize, ellipseSize);\n      }\n    }\n\n    if (p5.mouseIsPressed === true) {\n\n      console.log(color);\n      pg.stroke(color);\n\n      path.push(pg.createVector(x, y))\n\n      initial_point = currentPath[0];\n      console.log(initial_point);\n    }\n    p5.image(pg, 0, 0);\n  }\n\n  function mouseReleased(p5) {\n    if (image) {\n      pg.line(px, py, ...initial_point);\n      currentPath = [];\n      path.push(currentPath);\n    }\n  }\n\n  if (image) {\n    return (\n\n      <div>\n        {image && (\n          <div>\n            <Sketch setup={setup} draw={draw} mouseReleased={mouseReleased} />\n          </div>\n        )}\n        <ColorSelector selectColor={color => setColor(color)} />\n      </div>\n    )\n  } else {\n    return (\n      <FileInput selectImage={setImage} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}