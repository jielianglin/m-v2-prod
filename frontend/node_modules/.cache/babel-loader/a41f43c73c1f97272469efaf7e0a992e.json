{"ast":null,"code":"var _jsxFileName = \"/Users/jielianglin/Desktop/projects/m-v2-prod/frontend/src/components/upload/annotation/P5Mold.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Sketch from 'react-p5';\nimport ColorSelector from './ColorSelector';\nimport FileInput from '../FileInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar b;\nvar img;\nvar pg;\nvar imgWidth;\nvar imgHeight;\nvar angleSlider;\nlet distanceSlider;\nvar blobPoints = [];\nlet numPoints = 6; // try different values for different shaped blobs\n\nlet baseRadius = 100;\nlet radiusRandomness = 0.2; // amount of random variation in the blob radius \n\nlet cpOffsetAngle;\nlet cpdist;\nvar transparency;\nexport default function P5Mold() {\n  _s();\n\n  const [color, setColor] = React.useState(['#ff0000']);\n  const [image, setImage] = React.useState(null);\n\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(400, 400).parent(canvasParentRef);\n    pg = p5.createGraphics(600, 600);\n    img = p5.loadImage(image, img => {\n      p5.image(img, 0, 0);\n    });\n    angleSlider = p5.createSlider(0, 2.4, 2, 0.05);\n    angleSlider.position(200, 250);\n    angleSlider.changed(buildBlob);\n    distanceSlider = p5.createSlider(10, 150, 50, 5);\n    distanceSlider.position(200, 300);\n    distanceSlider.changed(buildBlob);\n    buildBlob();\n  };\n\n  const draw = p5 => {\n    if (image) {\n      imgWidth = img.width;\n      imgHeight = img.height;\n\n      if (imgWidth > 0 && imgHeight > 0) {\n        p5.resizeCanvas(imgWidth, imgHeight);\n      }\n\n      p5.image(img, 0, 0);\n      transparency = p5.color(color);\n      transparency.setAlpha(10);\n      pg.fill(transparency);\n      pg.stroke(transparency);\n      pg.beginShape();\n      pg.vertex();\n\n      for (b = 1; b < blobPoints.length; b++) {\n        let bp = blobPoints[b];\n        let pp = blobPoints[b - 1];\n        pg.bezierVertex(pp.cp[1].x, pp.cp[1].y, bp.cp[0].x, bp.cp[0].y, bp.x, bp.y);\n        let lastp = blobPoints[blobPoints.length - 1];\n        let firstp = blobPoints[0];\n        pg.bezierVertex(lastp.cp[1].x, lastp.cp[1].y, firstp.cp[0].x, firstp.cp[0].y, firstp.x, firstp.y);\n        pg.endShape();\n      }\n\n      p5.image(pg, 0, 0, imgWidth, imgHeight);\n    } else {\n      return null;\n    }\n  };\n\n  function buildBlob(p5) {\n    pg.clear();\n    blobPoints = [];\n    cpOffsetAngle = angleSlider.value();\n    cpdist = distanceSlider.value();\n\n    for (let p = 0; p < numPoints; p++) {\n      let a = p * Math.PI * 2 / numPoints;\n      let r = baseRadius + Math.random(-radiusRandomness * baseRadius, radiusRandomness * baseRadius);\n      let bp = {\n        x: Math.cos(a) * r,\n        y: Math.sin(a) * r,\n        angle: a,\n        cp: []\n      };\n      blobPoints.push(bp);\n    }\n\n    for (let b = 0; b < blobPoints.length; b++) {\n      let thisp = blobPoints[b];\n      let randomangle = Math.random(-cpOffsetAngle, cpOffsetAngle);\n      let cp1angle = thisp.angle - (Math.PI / 2 + randomangle);\n      let cp2angle = thisp.angle + (Math.PI / 2 - randomangle);\n      let cp1 = {\n        x: thisp.x + Math.cos(cp1angle) * cpdist,\n        y: thisp.y + Math.sin(cp1angle) * cpdist\n      };\n      let cp2 = {\n        x: thisp.x + Math.cos(cp2angle) * cpdist,\n        y: thisp.y + Math.sin(cp2angle) * cpdist\n      };\n      thisp.cp = [cp1, cp2];\n    }\n  }\n\n  if (image) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [image && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Sketch, {\n          setup: setup,\n          draw: draw\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ColorSelector, {\n        selectColor: color => setColor(color)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(FileInput, {\n      selectImage: setImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(P5Mold, \"lo/BMPVj4XUHEYds8caQUIfo3HA=\");\n\n_c = P5Mold;\n\nvar _c;\n\n$RefreshReg$(_c, \"P5Mold\");","map":{"version":3,"sources":["/Users/jielianglin/Desktop/projects/m-v2-prod/frontend/src/components/upload/annotation/P5Mold.js"],"names":["React","Sketch","ColorSelector","FileInput","b","img","pg","imgWidth","imgHeight","angleSlider","distanceSlider","blobPoints","numPoints","baseRadius","radiusRandomness","cpOffsetAngle","cpdist","transparency","P5Mold","color","setColor","useState","image","setImage","setup","p5","canvasParentRef","createCanvas","parent","createGraphics","loadImage","createSlider","position","changed","buildBlob","draw","width","height","resizeCanvas","setAlpha","fill","stroke","beginShape","vertex","length","bp","pp","bezierVertex","cp","x","y","lastp","firstp","endShape","clear","value","p","a","Math","PI","r","random","cos","sin","angle","push","thisp","randomangle","cp1angle","cp2angle","cp1","cp2"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Sketch from 'react-p5';\nimport ColorSelector from './ColorSelector';\nimport FileInput from '../FileInput';\n\nvar b;\nvar img;\nvar pg;\nvar imgWidth;\nvar imgHeight;\n\nvar angleSlider;\nlet distanceSlider;\n\nvar blobPoints = [];\nlet numPoints = 6; // try different values for different shaped blobs\nlet baseRadius = 100;\nlet radiusRandomness = 0.2; // amount of random variation in the blob radius \nlet cpOffsetAngle;\nlet cpdist;\n\nvar transparency;\n\nexport default function P5Mold() {\n    const [color, setColor] = React.useState(['#ff0000']);\n    const [image, setImage] = React.useState(null);\n\n\n    const setup = (p5, canvasParentRef) => {\n        p5.createCanvas(400, 400).parent(canvasParentRef);\n        pg = p5.createGraphics(600, 600);\n        img = p5.loadImage(image, img => {\n            p5.image(img, 0, 0);\n        });\n\n        angleSlider = p5.createSlider(0, 2.4, 2, 0.05);\n        angleSlider.position(200, 250);\n        angleSlider.changed(buildBlob);\n\n        distanceSlider = p5.createSlider(10, 150, 50, 5);\n        distanceSlider.position(200, 300);\n        distanceSlider.changed(buildBlob);\n\n        buildBlob();\n    }\n\n    const draw = p5 => {\n        if (image) {\n            imgWidth = img.width;\n            imgHeight = img.height;\n\n            if (imgWidth > 0 && imgHeight > 0) {\n                p5.resizeCanvas(imgWidth, imgHeight);\n            }\n\n            p5.image(img, 0, 0);\n            transparency = p5.color(color);\n            transparency.setAlpha(10);\n\n            pg.fill(transparency);\n            pg.stroke(transparency);\n\n\n\n            pg.beginShape();\n            pg.vertex();\n            for (b = 1; b < blobPoints.length; b++) {\n                let bp = blobPoints[b];\n                let pp = blobPoints[b - 1];\n                pg.bezierVertex(pp.cp[1].x, pp.cp[1].y, bp.cp[0].x, bp.cp[0].y, bp.x, bp.y);\n\n                let lastp = blobPoints[blobPoints.length - 1];\n                let firstp = blobPoints[0]\n\n                pg.bezierVertex(lastp.cp[1].x, lastp.cp[1].y, firstp.cp[0].x, firstp.cp[0].y, firstp.x, firstp.y);\n                pg.endShape();\n            }\n            p5.image(pg, 0, 0, imgWidth, imgHeight);\n        } else {\n            return null\n        }\n    }\n\n    function buildBlob(p5) {\n        pg.clear();\n\n\n        blobPoints = [];\n\n        cpOffsetAngle = angleSlider.value();\n        cpdist = distanceSlider.value();\n\n        for (let p = 0; p < numPoints; p++) {\n            let a = p * Math.PI * 2 / numPoints;\n            let r = baseRadius + Math.random(-radiusRandomness * baseRadius, radiusRandomness * baseRadius);\n\n            let bp = {\n                x: Math.cos(a) * r,\n                y: Math.sin(a) * r,\n                angle: a,\n                cp: []\n            };\n            blobPoints.push(bp);\n        }\n\n        for (let b = 0; b < blobPoints.length; b++) {\n            let thisp = blobPoints[b];\n            let randomangle = Math.random(-cpOffsetAngle, cpOffsetAngle);\n\n            let cp1angle = thisp.angle - (Math.PI / 2 + randomangle);\n            let cp2angle = thisp.angle + (Math.PI / 2 - randomangle);\n\n            let cp1 = {\n                x: thisp.x + (Math.cos(cp1angle) * cpdist),\n                y: thisp.y + (Math.sin(cp1angle) * cpdist)\n            };\n            let cp2 = {\n                x: thisp.x + (Math.cos(cp2angle) * cpdist),\n                y: thisp.y + (Math.sin(cp2angle) * cpdist)\n            };\n\n            thisp.cp = [cp1, cp2];\n        }\n    }\n\n    if (image) {\n        return (\n            <div>\n                {image && (\n                    <div>\n                        <Sketch setup={setup} draw={draw} />\n                    </div>\n                )}\n                <ColorSelector selectColor={color => setColor(color)} />\n            </div>\n        )\n\n    } else {\n        return (\n            <FileInput selectImage={setImage} />\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}